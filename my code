#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ACCOUNTS 100
#define NAME_LENGTH 50

// Structure to store account data
typedef struct {
    int accountNumber;
    char name[NAME_LENGTH];
    float balance;
} Account;

Account accounts[MAX_ACCOUNTS];
int accountCount = 0;

// Function prototypes
void createAccount();
void viewAccounts();
void depositMoney();
void withdrawMoney();
void searchAccount();
void saveToFile();
void loadFromFile();
void menu();

int main() {
    loadFromFile();
    menu();
    return 0;
}

// Function to display the menu
void menu() {
    int choice;
    do {
        printf("\n===== Bank Management System =====\n");
        printf("1. Create Account\n");
        printf("2. View All Accounts\n");
        printf("3. Deposit Money\n");
        printf("4. Withdraw Money\n");
        printf("5. Search Account\n");
        printf("6. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                createAccount();
                break;
            case 2:
                viewAccounts();
                break;
            case 3:
                depositMoney();
                break;
            case 4:
                withdrawMoney();
                break;
            case 5:
                searchAccount();
                break;
            case 6:
                saveToFile();
                printf("Data saved. Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 6);
}

// Function to create a new account
void createAccount() {
    if (accountCount >= MAX_ACCOUNTS) {
        printf("Error: Maximum account limit reached.\n");
        return;
    }

    Account newAccount;
    printf("Enter Account Number: ");
    scanf("%d", &newAccount.accountNumber);
    printf("Enter Name: ");
    getchar(); // Clear input buffer
    fgets(newAccount.name, NAME_LENGTH, stdin);
    newAccount.name[strcspn(newAccount.name, "\n")] = 0; // Remove newline
    newAccount.balance = 0.0; // Initialize with zero balance

    accounts[accountCount++] = newAccount;
    printf("Account created successfully!\n");
}

// Function to view all accounts
void viewAccounts() {
    if (accountCount == 0) {
        printf("No accounts found.\n");
        return;
    }

    printf("\n===== All Accounts =====\n");
    for (int i = 0; i < accountCount; i++) {
        printf("Account Number: %d, Name: %s, Balance: $%.2f\n", 
               accounts[i].accountNumber, accounts[i].name, accounts[i].balance);
    }
}

// Function to deposit money into an account
void depositMoney() {
    int accountNumber;
    float amount;

    printf("Enter Account Number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < accountCount; i++) {
        if (accounts[i].accountNumber == accountNumber) {
            printf("Enter amount to deposit: ");
            scanf("%f", &amount);
            if (amount <= 0) {
                printf("Invalid amount.\n");
                return;
            }

            accounts[i].balance += amount;
            printf("$%.2f deposited successfully!\n", amount);
            return;
        }
    }

    printf("Account not found.\n");
}

// Function to withdraw money from an account
void withdrawMoney() {
    int accountNumber;
    float amount;

    printf("Enter Account Number: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < accountCount; i++) {
        if (accounts[i].accountNumber == accountNumber) {
            printf("Enter amount to withdraw: ");
            scanf("%f", &amount);
            if (amount <= 0 || amount > accounts[i].balance) {
                printf("Invalid amount or insufficient funds.\n");
                return;
            }

            accounts[i].balance -= amount;
            printf("$%.2f withdrawn successfully!\n", amount);
            return;
        }
    }

    printf("Account not found.\n");
}

// Function to search for an account by account number
void searchAccount() {
    int accountNumber;
    printf("Enter Account Number to search: ");
    scanf("%d", &accountNumber);

    for (int i = 0; i < accountCount; i++) {
        if (accounts[i].accountNumber == accountNumber) {
            printf("Account found: Account Number: %d, Name: %s, Balance: $%.2f\n", 
                   accounts[i].accountNumber, accounts[i].name, accounts[i].balance);
            return;
        }
    }

    printf("Account with Account Number %d not found.\n", accountNumber);
}

// Function to save account data to a file
void saveToFile() {
    FILE *file = fopen("accounts.dat", "wb");
    if (file == NULL) {
        printf("Error saving data to file.\n");
        return;
    }

    fwrite(&accountCount, sizeof(int), 1, file);
    fwrite(accounts, sizeof(Account), accountCount, file);
    fclose(file);
}

// Function to load account data from a file
void loadFromFile() {
    FILE *file = fopen("accounts.dat", "rb");
    if (file == NULL) {
        printf("No saved data found. Starting fresh.\n");
        return;
    }

    fread(&accountCount, sizeof(int), 1, file);
    fread(accounts, sizeof(Account), accountCount, file);
    fclose(file);
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Function prototypes
void initializeGame();
void printRoomDescription();
void handlePlayerInput();
void movePlayer(char direction[]);
void printInventory();
void checkForWinCondition();

// Global variables
char playerName[50];
int currentRoom = 1;
int hasKey = 0;

int main() {
    initializeGame();

    while (1) {
        printRoomDescription();
        handlePlayerInput();
        checkForWinCondition();
    }

    return 0;
}

// Function definitions
void initializeGame() {
    // ...
}

void printRoomDescription() {
    // ...
}

void handlePlayerInput() {
    // ...
}

void movePlayer(char direction[]) {
    // ...
}

void printInventory() {
    // ...
}

void checkForWinCondition() {
    // ...
}
// initializeGame()
void initializeGame() {
    srand(time(NULL));
    printf("Welcome to the Adventure Game!\n");
    printf("Enter your name: ");
    scanf("%s", playerName);
    printf("Hello, %s!\n", playerName);
}

// printRoomDescription()
void printRoomDescription() {
    switch (currentRoom) {
        case 1:
            printf("You are in a dimly lit room.\n");
            printf("There is a door to the north and a passage to the east.\n");
            break;
        // ... Add more room descriptions
    }
}

// handlePlayerInput() 
void handlePlayerInput() {
    char input[50];
    printf("> ");
    scanf("%s", input);

    // ... Process player input
}
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ACCOUNTS 100

// Structure to represent a bank account
struct Account {
    char name[50];
    int accountNumber;
    float balance;
};

// Function to create a new account
void createAccount(struct Account accounts[], int *numAccounts) {
    if (*numAccounts < MAX_ACCOUNTS) {
        struct Account newAccount;
        printf("Enter account holder name: ");
        scanf("%s", newAccount.name);
        printf("Enter account number: ");
        scanf("%d", &newAccount.accountNumber);
        newAccount.balance = 0.0;

        accounts[*numAccounts] = newAccount;
        (*numAccounts)++;

        printf("Account created successfully.\n");
    } else {
        printf("Maximum number of accounts reached.\n");
    }
}

// Function to deposit money into an account
void deposit(struct Account accounts[], int numAccounts) {
    int accountNumber;
    float amount;
    printf("Enter account number: ");
    scanf("%d", &accountNumber);

    int accountIndex = -1;
    for (int i = 0; i < numAccounts; i++) {
        if (accounts[i].accountNumber == accountNumber) {
            accountIndex = i;
            break;
        }
    }

    if (accountIndex != -1) {
        printf("Enter amount to deposit: ");
        scanf("%f", &amount);

        accounts[accountIndex].balance += amount;
        printf("Deposit successful. New balance: %.2f\n", accounts[accountIndex].balance);
    } else {
        printf("Account not found.\n");
    }
}

// Function to withdraw money from an account
void withdraw(struct Account accounts[], int numAccounts) {
    // ... (Similar to deposit function)
}

// Function to check account balance
void checkBalance(struct Account accounts[], int numAccounts) {
    // ... (Similar to deposit function)
}

int main() {
    struct Account accounts[MAX_ACCOUNTS];
    int numAccounts = 0;
    int choice;

    while (1) {
        printf("\nBanking System Menu:\n");
        printf("1. Create Account\n");
        printf("2. Deposit\n");
        printf("3. Withdraw\n");
        printf("4. Check Balance\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                createAccount(accounts, &numAccounts);
                break;
            case 2:
                deposit(accounts, numAccounts);
                break;
            case 3:
                withdraw(accounts, numAccounts);
                break;
            case 4:
                checkBalance(accounts, numAccounts);
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }

    return 0;
}
# hypothetical code, not from anywhere
def parse_statement(lexer) -> PrettyLittleSyntaxTree:
    ...
    if type := lexer.try_next(TYPE_NAME):
        variable_name = lexer.next(IDENTIFIER)

        if lexer.try_next("="):
            initializer = parse_initializer(lexer)
        else:
            initializer = None

        lexer.next(SEMICOLON)

        return VariableDeclarationNode(
            type = type,
            name = variable_name,
            initializer = initializer,
        )
    ...

# much later...
def emit_code_for(node: PrettyLittleSyntaxTree) -> DisgustingMachineCode:
    ...
    if isinstance(node, VariableDeclarationNode):
        slot = reserve_stack_space(node.type.sizeof())
        add_to_environment(node.name, slot)
        if node.initializer is not None:
            register = emit_code_for(node.initializer)
            emit(f"mov {register}, [{slot}]"
# lexer.try_next() checks if the next token is ~, and if so, consumes
# and returns it (truthy)
elif lexer.try_next("~"):
    # prefix() parses and generates code for the expression after the ~,
    # and load_result emits code to load it, if needed
    meta = load_result(prefix())
    # immediately start yeeting out the negation code!
    emit("i32.const 0xffffffff")
    emit("i32.xor")
    # webassembly only supports 32bit types, so if this is a smaller type,
    # mask it down
    mask_to_sizeof(meta.type)
    # return type information
    return meta
    int swap(int* a, int* b) {
  int t;
  t = *a; *a = *b; *b = t;
  return t;
}

int fib(int n) {
  int a, b;
  for (a = b = 1; n > 2; n = n - 1) {
    swap(&a, &b);
    b = b + a;
  }
  return b;
}

int main() {
  return fib(10); // 55
}
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *intPtr;
    char *charPtr;
    double *doublePtr;
    int arr[10];
    int i;

    // Allocate memory for an integer
    intPtr = (int*) malloc(sizeof(int));
    if (intPtr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Assign a value to the integer
    *intPtr = 42;

    // Print the value and address of the integer
    printf("Value of integer: %d\n", *intPtr);
    printf("Address of integer: %p\n", intPtr);

    // Allocate memory for a character
    charPtr = (char*) malloc(sizeof(char));
    if (charPtr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Assign a value to the character
    *charPtr = 'A';

    // Print the value and address of the character
    printf("Value of character: %c\n", *charPtr);
    printf("Address of character: %p\n", charPtr);

    // Allocate memory for a double
    doublePtr = (double*) malloc(sizeof(double));
    if (doublePtr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Assign a value to the double
    *doublePtr = 3.14159;

    // Print the value and address of the double
    printf("Value of double: %f\n", *doublePtr);
    printf("Address of double: %p\n", doublePtr);

    // Initialize an array
    for (i = 0; i < 10; i++) {
        arr[i] = i * 10;
    }

    // Print the array using pointers
    printf("Array elements: ");
    for (i = 0; i < 10; i++) {
        printf("%d ", *(arr + i));
    }
    printf("\n");

    // Free allocated memory
    free(intPtr);
    free(charPtr);
    free(doublePtr);

    return 0;
}
